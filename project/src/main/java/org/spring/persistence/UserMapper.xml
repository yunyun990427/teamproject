<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

  <mapper namespace="org.spring.persistence.UserMapper">

    <!-- 로그인 -->
    <sql id= "memberCols">
        user_email,
        user_pw
    </sql>
    <select id="validateUser" 
    resultType="org.spring.domain.UserDTO" 
    parameterType="map">
        SELECT user_email, user_pw
        FROM user WHERE user_email LIKE #{user_email} 
        AND user_pw LIKE #{user_pw}
    </select>

    <!-- 네이버 로그인 
    <insert id="insert" parameterType="org.spring.domain.UserDTO">
        INSERT INTO user (user_email, user_name, user_phone) VALUES (#{user_email},#{user_name},#{user_phone})
    </insert>-->


    <!-- 구글 로그인
    <insert id="insertOrUpdate" parameterType="org.spring.domain.UserDTO">
        INSERT INTO user (social_user_email, user_name, login_type)
        VALUES (#{user_email}, #{user_name}, #{login_type})
        ON DUPLICATE KEY UPDATE user_name = VALUES(user_name),user_num = LAST_INSERT_ID(user_num)
    </insert> -->
    
    <!-- 구글 로그인 -->
    <insert id="insertOrUpdate" parameterType="org.spring.domain.UserDTO">
	    INSERT INTO user (social_user_email, user_name, login_type)
	    VALUES (#{user_email}, #{user_name}, #{login_type})
	    ON DUPLICATE KEY UPDATE 
	        user_name = VALUES(user_name),
	        login_type = VALUES(login_type)
	</insert>
	
	
	<select id="findUserByEmail" parameterType="string" resultType="org.spring.domain.UserDTO">
    SELECT * FROM user WHERE social_user_email = #{user_email}
</select>

<update id="updateGoogleUser" parameterType="org.spring.domain.UserDTO">
    UPDATE user 
    SET 
        user_name = #{user_name},
        login_type = #{login_type}
    WHERE social_user_email = #{user_email}
</update>

<insert id="insertGoogleUser" parameterType="org.spring.domain.UserDTO">
    INSERT INTO user (social_user_email, user_name, login_type)
    VALUES (#{user_email}, #{user_name}, #{login_type})
</insert>
	
	
	
    

    <!-- 회원가입 -->
    <insert id="registerUser" parameterType="org.spring.domain.RegisterDTO">
        INSERT INTO user (user_email,user_pw,user_name,user_phone,login_type)
        VALUES (#{user_email},#{user_pw},#{user_name},#{user_phone},"basic")
        ON DUPLICATE KEY UPDATE 
        user_email = VALUES(user_email)
    </insert>

    <!-- 중복 확인 -->
    <select id="checkId" resultType="boolean">
        SELECT COUNT(user_email) FROM user WHERE user_email LIKE #{user_email};
    </select>

    <!-- 아이디 찾기 -->
    <select id="searchId" resultType="string">
        SELECT user_email FROM user 
        WHERE user_name LIKE #{user_name} AND user_phone LIKE #{user_phone};
    </select>
    
    <!-- 임시 비밀번호 발급 -->
	<select id="searchPw" resultType="org.spring.domain.UserDTO" parameterType="String">
		SELECT user_email, user_name, user_phone
		FROM userDTO
		WHERE user_email LIKE #{user_email}
	</select>
	
	<!-- 핸드폰 번호 중복 확인 -->
	<select id="countByPhoneNumber" parameterType="string" resultType="int">
		 SELECT COUNT(user_phone) FROM user WHERE user_phone = #{user_phone};
	</select>
	
	<!-- 존재하는 회원인지 확인 -->
	<select id="getUserByEmail" resultType="org.spring.domain.UserDTO">
		SELECT *
		FROM user
		WHERE user_email = #{email};
	</select>
	
	<update id="updatePassword" parameterType="org.spring.domain.UserDTO" >
    	UPDATE user 
    	SET user_pw = #{user_pw}
    	WHERE user_email = #{email} AND login_type = #{login_type};
	</update>



	<update id="updateInquiryStatus" parameterType="map">
	    UPDATE user_inquiry
	    SET inquiry_progress = #{inquiry_progress}
	    WHERE inquiry_num = #{inquiry_num}
	</update>

	<select id="getAllInquiries" resultType="org.spring.domain.InquiryDTO">
    	SELECT * FROM user_inquiry
    	ORDER BY inquiry_regdate DESC
	</select>
</mapper>